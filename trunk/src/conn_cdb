require 'windows_popen'
require 'win32ole'
CDB_PATH="\"C:\\Program Files\\Debugging Tools for Windows (x86)\\cdb.exe\""

#Establish a connection to the Windows CDB debugger. CDB has all the features of WinDbg, but it uses
#a simple command line interface.
#
#Parameters: For now, the full command line as a string. Sugar may follow later. Remember that
#program names that include spaces need to be enclosed in quotes \"c:\\Program Files [...] \" etc.
module CONN_CDB

    #These methods will override the stubs present in the Connector
    #class, and implement the protocol specific functionality for 
    #these generic functions.
    #
    #Arguments required to set up the connection are stored in the
    #Connector instance variable @module_args.
    #
    #Errors should be handled at the Module level (ie here), since Connector
    #just assumes everything is going to plan.

    #Set up a new socket.
    def get_process_array
        wmi= WIN32OLE.connect("winmgmts://")
        processes=wmi.ExecQuery("select * from win32_process")
        ary=[]
        processes.each {|p|
            ary << p.ProcessId
        }
        ary
    end

    def establish_connection
        @command_line=@module_args[:command_line]
        begin
            @debugger=WindowsPipe.popen(@command_line)
            @child_pid=@debugger.pid
        rescue
            #do something
        end

    end

    #Blocking read from the socket.
    def blocking_read
    end

    #Blocking write to the socket.
    def blocking_write( data )
    end

    #Return a boolen.
    def is_connected?
        get_process_array.include? @child_pid
    end

    #Cleanly destroy the socket. 
    def destroy_connection
        # 
        @debugger.write("q\n") if is_connected?
    end

end # module CONN_CDB

